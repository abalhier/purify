{"version":3,"sources":["webpack:///./src/pages/guides/maybeasync-eitherasync-for-haskellers.js"],"names":["MaybeApiGuide","props","location","language","style","highlightStyle","href"],"mappings":"4FAAA,8GAiGeA,UA1FO,SAAAC,GAAK,OACzB,kBAAC,IAAD,CAAQC,SAAUD,EAAMC,UACtB,yEACA,kBAAC,OAAD,+LAIE,6BAJF,kKAQA,6BAVF,yJAcE,6BAdF,uMAkBE,6BAlBF,mOAsBE,kBAAC,IAAD,CAAmBC,SAAS,UAAUC,MAAOC,KAA7C,qUAtBF,0MAoCE,6BApCF,+DAsCE,kBAAC,IAAD,CAAmBF,SAAS,aAAaC,MAAOC,KAAhD,6fAtCF,yMAuDE,6BAvDF,wJA0DE,6BA1DF,kKA6DW,6BA7DX,sGAgEE,qDACA,4BACE,4BAAK,gBAAL,kBACA,4BAAK,oBAAL,qBACA,oEACuC,kBAAC,IAAD,gCADvC,gFAIA,4KAIA,+CACA,kFACsD,IACpD,uBAAGC,KAAK,gHAAR,wBAFF,KAOA","file":"component---src-pages-guides-maybeasync-eitherasync-for-haskellers-js-4f6a68ebd789a0ac6f2b.js","sourcesContent":["import React from 'react'\r\nimport Layout from '../../components/Layout'\r\nimport { HL } from '../../components/HL'\r\nimport SyntaxHighlighter from 'react-syntax-highlighter'\r\nimport highlightStyle from 'react-syntax-highlighter/styles/hljs/googlecode'\r\nimport { Note } from './maybe-api-guide'\r\n\r\nconst MaybeApiGuide = props => (\r\n  <Layout location={props.location}>\r\n    <h1>MaybeAsync and EitherAsync for Haskellers</h1>\r\n    <Note>\r\n      Keep in mind a lot of stuff have changed since this was written (back in\r\n      January 2019), Either and MaybeAsync evolved to be more distant than the\r\n      monad transformer design in late 2020\r\n      <br /> and instead adopted the PromiseLike interface to make it easier to\r\n      work with and reduce the large amount of boilerplate the original\r\n      implementation required.\r\n    </Note>\r\n    <br />\r\n    As mentioned in the description of those data types, MaybeAsync and\r\n    EitherAsync are funky Promise-specialized monad transformers for Maybe and\r\n    Either.\r\n    <br />\r\n    Some things may feel out of place and that is completely intentional,\r\n    porting monad transformers over to TypeScript was just not practical,\r\n    especially the higher-kinded types and typeclasses part.\r\n    <br />A lot of thought went into designing the APIs and I believe that the\r\n    result is satisfactory. In fact, even though the implementation is\r\n    completely different, code written in mtl style looks pretty similar! Here,\r\n    take a look:\r\n    <SyntaxHighlighter language=\"haskell\" style={highlightStyle}>\r\n      {`tryToInsertUser user = runExceptT $ do\r\n  validatedUser <- liftEither $ validateUser user\r\n  userExists <- lift $ doesUserAlreadyExist validatedUser\r\n\r\n  when userExists (throwE UserAlreadyExists)\r\n\r\n  maybeToExceptT ServerError $ do\r\n    updatedUser <- MaybeT $ hashPasswordInUser user\r\n    lift $ insertUser updatedUser`}\r\n    </SyntaxHighlighter>\r\n    Keep in mind this code is not representative of the perfect or cleanest\r\n    implementation for such a feature, I tried to shove as much functions, that\r\n    are also possible in Maybe-EitherAsync, as I could.\r\n    <br />\r\n    Here's the same logic implemented with purify in TypeScript:\r\n    <SyntaxHighlighter language=\"typescript\" style={highlightStyle}>\r\n      {`const tryToInsertUser = user =>\r\n  EitherAsync(async ({ liftEither, throwE, fromPromise }) => {\r\n    const validatedUser = await liftEither(validateUser(user))\r\n    const userExists = await doesUserAlreadyExist(validatedUser)\r\n\r\n    if (userExists) throwE('UserAlreadyExists')\r\n\r\n    return fromPromise(MaybeAsync(async ({ fromPromise }) => {\r\n        const updatedUser = await fromPromise(hashPasswordInUser(user))\r\n        return insertUser(updatedUser)\r\n    }).toEitherAsync('ServerError').run())\r\n  })`}\r\n    </SyntaxHighlighter>\r\n    One important thing to understand about Maybe and EitherAsync is that the\r\n    docs and the API create the illusion that code is running in some custom\r\n    magical context that lets you safely unwrap values.\r\n    <br />\r\n    Is it referred to as \"MaybeAsync context\" or \"EitherAsync context\", but in\r\n    fact there's no magic and the only real context is the async/await block.\r\n    <br />\r\n    That allows us to simulate do-notation using await and what those \"lifting\"\r\n    function actually do is return Promises that get rejected when a value is\r\n    missing. <br />\r\n    The `run` function will later on catch all those rejections and return a\r\n    proper Maybe/Either value.\r\n    <h3>Glossary of functions</h3>\r\n    <ul>\r\n      <li>{'MaybeAsync<a>'} = MaybeT IO a</li>\r\n      <li>{'EitherAsync<e, a>'} = ExceptT e IO a</li>\r\n      <li>\r\n        liftEither/Maybe = liftEither/Maybe (<HL>MaybeT/ExceptT . return</HL> in\r\n        Haskell, but nothing like that in purify, they function the same though)\r\n      </li>\r\n      <li>\r\n        fromPromise = the MaybeT/ExceptT constructor (you only need to wrap the\r\n        IO action with the newtype in Haskell, in purify it's not as simple)\r\n      </li>\r\n      <li>throwE = throwE</li>\r\n      <li>\r\n        MaybeAsync#toEitherAsync = maybeToExceptT (from the{' '}\r\n        <a href=\"http://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Maybe.html#v:maybeToExceptT\">\r\n          transformers package\r\n        </a>\r\n        )\r\n      </li>\r\n      <li>EitherAsync#toMaybeAsync = exceptToMaybeT</li>\r\n    </ul>\r\n  </Layout>\r\n)\r\n\r\nexport default MaybeApiGuide\r\n"],"sourceRoot":""}